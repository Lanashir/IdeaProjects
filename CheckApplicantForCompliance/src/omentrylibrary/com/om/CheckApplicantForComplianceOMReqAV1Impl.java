
package omentrylibrary.com.om;

import com.sun.xml.ws.api.SOAPVersion;
import com.sun.xml.ws.api.addressing.AddressingVersion;
import com.sun.xml.ws.api.message.HeaderList;
import com.sun.xml.ws.api.message.Headers;
import com.sun.xml.ws.developer.JAXWSProperties;
import com.sun.xml.ws.developer.WSBindingProvider;
import omentrylibrary.workflow.apm.fiom.dms.fairisaac.com.AdditionalParameters;
import omentrylibrary.workflow.apm.fiom.dms.fairisaac.com.InvokeResponseParameters;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.annotation.Resource;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.soap.Addressing;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.stream.Collectors;

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */

@WebService(serviceName = "CheckApplicantForComplianceOMReqAV1Impl_client_ep", targetNamespace = "http://omentrylibrary/com/om", portName = "CheckApplicantForComplianceOMReqACS_pt")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@Addressing
@XmlSeeAlso({
        ObjectFactory.class,
        omentrylibrary.workflow.apm.fiom.dms.fairisaac.com.ObjectFactory.class
})
public class CheckApplicantForComplianceOMReqAV1Impl implements CheckApplicantForComplianceOMReqACS{
    @Resource
    private WebServiceContext wsContext;

    private final static Logger logger = LogManager.getLogger(CheckApplicantForComplianceOMReqAV1Impl.class);

    @WebMethod(operationName = "CheckApplicantForCompliance",action = "CheckApplicantForCompliance")
    @Oneway

    public void invokePH3Request (
            @WebParam(name = "invokePH3", targetNamespace = "http://omentrylibrary/com/om", partName = "invokePH3Parameters")
                    InvokePH3 invokePH3Parameters) {
        HeaderList headers = (HeaderList) wsContext.getMessageContext().get(JAXWSProperties.INBOUND_HEADER_LIST_PROPERTY);
        /*Map<String, Object> map = wsContext.getMessageContext();
        for (Object obj : map.entrySet()) {
            System.out.println(obj);
        }*/
        logger.entry();
        logger.info("Request received");
        com.sun.xml.ws.api.addressing.WSEndpointReference replyToEndPointReference = headers.getReplyTo(com.sun.xml.ws.api.addressing.AddressingVersion.MEMBER, com.sun.xml.ws.api.SOAPVersion.SOAP_11);
        logger.info("replyTo = " + replyToEndPointReference.getAddress());
        String messageId = headers.getMessageID(AddressingVersion.MEMBER,
                SOAPVersion.SOAP_11);
        logger.info("Msg ID = " + messageId);

        logSoap(InvokePH3.class, invokePH3Parameters, "Parsing input message =");
        try {
            CheckApplicantForComplianceOMReqACSResponse srv = new CheckApplicantForComplianceOMReqAV1ImplClientEp().getCheckApplicantForComplianceOMReqACSPt();
            WSBindingProvider bp = (WSBindingProvider) srv;
            bp.setAddress(replyToEndPointReference.getAddress());

            HeaderList outHeaderList = new HeaderList();
            outHeaderList.add(Headers.create(AddressingVersion.W3C.toTag, replyToEndPointReference.getAddress()));
            outHeaderList.add(Headers.create(AddressingVersion.W3C.actionTag, "CheckApplicantForCompliance"));
            outHeaderList.add(Headers.create(AddressingVersion.W3C.messageIDTag, "urn:60DE09F0516111E5BFA0C9AD703317D1"));
            outHeaderList.add(Headers.create(AddressingVersion.W3C.relatesToTag, messageId));
            outHeaderList.add(Headers.create(AddressingVersion.W3C.replyToTag,
                    "http://www.w3.org/2005/08/addressing/anonymous"));
            outHeaderList.add(Headers.create(AddressingVersion.W3C.faultToTag,
                    "http://www.w3.org/2005/08/addressing/anonymous"));
            bp.setOutboundHeaders(outHeaderList);

            InvokePH3Response invokePH3Response = new InvokePH3Response();
            InvokeResponseParameters invokeResponseParameters = new InvokeResponseParameters();
            AdditionalParameters additionalParameters = new AdditionalParameters();
            additionalParameters.setKey(invokePH3Parameters.getParams().getAdditionalParams().getKey());
            additionalParameters.setValue(invokePH3Parameters.getParams().getAdditionalParams().getValue());
            invokeResponseParameters.setCreditApplicationId(invokePH3Parameters.getParams().getCreditApplicationId());
            invokeResponseParameters.setAction(invokePH3Parameters.getParams().getAction());
            invokeResponseParameters.setAdditionalParams(additionalParameters);
            String request = "";
            try {
                request = Files.lines(Paths.get("..\\config\\resources\\BSCR1_response.xml"))
                        .parallel()
                        .map(String::trim)
                        .filter(line -> line.length() > 2)
                        .collect(Collectors.joining());
            } catch (IOException e) {
                logger.error(e);
            }
            request = request.replace("${APPID}", invokePH3Parameters.getParams().getCreditApplicationId());

            logger.info(invokePH3Parameters.getParams().getAction());

            String ext2Str = "00000";
            String ext3Str ="КY";
            String tag ="<sbMaxLevel>1</sbMaxLevel>";

            if (invokePH3Parameters.getParams().getAction().contains("PSBCSR1")){
                ext2Str = "00040";
                ext3Str = "ППЖ";
                tag = "<sbMaxLevel/>";
            }

            request = request.replace("${ext2Str}", ext2Str);
            request = request.replace("${ext3Str}", ext3Str);
            request = request.replace("${tag}", tag);

            String UserXml = "<UserContext><userUUID>5D52AD779C33C55BE040AAAA18305895</userUUID><tenantID>FI_BASE_TENANT</tenantID></UserContext>";
            invokeResponseParameters.setCreditApplicationXml("<![CDATA[" + request + "]]>");
            invokeResponseParameters.setUserContextXml("<![CDATA[" + UserXml + "]]>");
            invokePH3Response.setParams(invokeResponseParameters);


        logSoap(InvokePH3Response.class, invokePH3Response, "Parsing output message =");
        Thread.sleep(10000); //Делей ответа
        srv.checkApplicantForCompliance(invokePH3Response);
        logger.info("Response send");
        logger.exit();
        }catch(Exception e){
            logger.error(e.getLocalizedMessage());
            logger.error(e);
        }
    }

    private void logSoap(Class objClass, Object obj, String Msg){
        try {
            JAXBContext jc = JAXBContext.newInstance(objClass);
            Marshaller marshaller = jc.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            StringWriter stringWriter = new StringWriter();
            marshaller.marshal(obj, stringWriter);
            logger.info(Msg + stringWriter.toString());
        } catch (JAXBException e) {
            logger.error(Msg + e);
        }
    }
}
